# To-Do
# Зависимость максимального нагрева от температуры вохдуха

substitutions:
  vendor: ballu
  dev_name: oneair
  model: asp-80
#  mac: 16b0 #dcd8

#ESP32 Определение нужных GPIO
  base: esp32dev
  touch_1: GPIO2                # Кнопка скорость вентилятора
  touch_2: GPIO12               # Кнопка нагреватель
  touch_3: GPIO13               # Кнопка Led-индикация
  led_status: GPIO14            # Светодиод Led-индикация
  led_heating: GPIO15           # Светодиод нагреватель
  led_1_speed: GPIO16           # Светодиод скорость 1
  led_2_speed: GPIO17           # Светодиод скорость 2
  led_3_speed: GPIO18           # Светодиод скорость 3
  buzzer: GPIO19                # Буззер
  fan_fg: GPIO21                # Вентилятор FG
  fan_pwm: GPIO22               # Вентилятор PWM
  fan_pwr: GPIO23               # Вентилятор PWR
  heating: GPIO25               # Нагреватель
  sensor_open: GPIO26           # Сенсоры открытия
  sensor_ntc: GPIO36            # Сенсоры температуры
  led_1_RGB: GPIO4              # RGB 1
  led_2_RGB: GPIO5              # RGB 2
  led_3_RGB: GPIO24             # RGB 3

globals:
  - id: no_beep
    type: bool
    initial_value: 'true'
  - id: no_mode
    type: bool
    initial_value: 'false'
  - id: errors
    type: bool
    initial_value: 'false'
  - id: mode
    type: int
    initial_value: '0'
  - id: half_led
    type: bool
    initial_value: 'false'
    restore_value: True

esp32:
  board: esp32dev
  framework:
    type: arduino

esphome:
  name: ${vendor}-${dev_name}-${model} # -${mac}
  friendly_name: Ballu OneAir ASP-80
  on_boot:
    priority: 600
    then:
      - output.turn_on: buzzer
      - output.turn_off: heating_gpio
      - output.turn_off: fan_power
      - output.turn_on: led_1_speed
      - output.turn_on: led_2_speed
      - output.turn_on: led_3_speed
      - output.turn_on: led_heating
      - delay: 700ms
      - output.turn_off: led_1_speed
      - output.turn_off: led_2_speed
      - output.turn_off: led_3_speed
      - output.turn_off: led_heating
      - fan.turn_off: fan_output
      - lambda: 'id(no_beep) = false;'
      - output.turn_off: buzzer
# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 0s
ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${vendor}-${dev_name}-${model}
    password: "12345678"

esp32_improv:
  authorizer: none
captive_portal:

output:
  - platform: gpio
    pin: ${buzzer}
    id: buzzer

  - platform: ledc
    pin: ${fan_pwm}
    id: fan_pwm_gpio
    inverted: True
#    min_power: 0.22 почему-то если добавить, то вообще не работает. Шим тупо не включается.
    max_power: 0.74

  - platform: ledc
    pin: ${led_heating}
    id: led_heating
    inverted: True

  - platform: ledc
    pin: ${led_1_speed}
    id: led_1_speed
    inverted: True
  - platform: ledc
    pin: ${led_2_speed}
    id: led_2_speed
    inverted: True
  - platform: ledc
    pin: ${led_3_speed}
    id: led_3_speed
    inverted: True

  - platform: gpio
    pin: ${fan_pwr}
    id: fan_power

  - platform: ledc
    pin: ${heating}
    id: heating_gpio

light:
  - platform: status_led
    id: led_info
    pin:
      number: $led_status
      inverted: True
    effects: 
      - strobe:
          name: error
          colors:
            - state: true
              duration: 1s
            - state: false
              duration: 1s

script:
  - id: play_beep
    then:
      - if:
          condition:
            switch.is_on: buzzer_enable
          then:
            - output.turn_on: buzzer
            - delay: 700ms
            - output.turn_off: buzzer
  - id: play_beep_short
    then:
      - if:
          condition:
            switch.is_on: buzzer_enable
          then:
            - output.turn_on: buzzer
            - delay: 200ms
            - output.turn_off: buzzer
  - id: play_beep_error
    then:
      - output.turn_on: buzzer
      - delay: 50ms
      - output.turn_off: buzzer
      - delay: 50ms
      - output.turn_on: buzzer
      - delay: 50ms
      - output.turn_off: buzzer
      - delay: 50ms
      - output.turn_on: buzzer
      - delay: 50ms
      - output.turn_off: buzzer
  - id: led_check
    then:
      - if:
          condition:
            switch.is_on: heater_output
          then:
            if:
              condition:
                lambda: "return id(half_led);"
              then:
                output.set_level:
                  id: led_heating
                  level: 15%
              else:
                output.set_level:
                  id: led_heating
                  level: 100%
          else: 
            output.turn_off: led_heating
      - lambda: |-
          if (id(fan_output).state) {
            if (id(fan_output).speed > 90) {
              id(led_1_speed).set_level(id(half_led)?0.15:1);
              id(led_2_speed).set_level(id(half_led)?0.15:1);
              id(led_3_speed).set_level(id(half_led)?0.15:1);
            } else if (id(fan_output).speed > 70) {
              id(led_1_speed).set_level(id(half_led)?0.15:1);
              id(led_2_speed).set_level(id(half_led)?0.15:1);
              id(led_3_speed).turn_off();
            } else if (id(fan_output).speed > 22) {
              id(led_1_speed).set_level(id(half_led)?0.15:1);
              id(led_2_speed).turn_off();
              id(led_3_speed).turn_off();
            } else {
              id(led_1_speed).turn_off();
              id(led_2_speed).turn_off();
              id(led_3_speed).turn_off();
            }
          } else {
            id(led_1_speed).turn_off();
            id(led_2_speed).turn_off();
            id(led_3_speed).turn_off();
          }
  - id: led_off
    then:
      - output.turn_off: led_1_speed
      - output.turn_off: led_2_speed
      - output.turn_off: led_3_speed
      - output.turn_off: led_heating

sensor: 
  - platform: pulse_counter
    pin:
      number: $fan_fg
      mode: INPUT_PULLUP
    name: ${dev_name}_rpm
    id: fan_rpm
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.05
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 3s
    on_value:
      - if:
          condition:
            and:
            - fan.is_on: fan_output
            - lambda: 'return x == 0;'
          then:
            - delay: 10s
            - if:
                condition:
                  and:
                  - fan.is_on: fan_output
                  - lambda: 'return x == 0;'
                then: 
                  - script.execute: play_beep_error
                  - fan.turn_off: fan_output
                  - if:
                      condition:
                        switch.is_on: heater_output
                      then:
                        - switch.turn_off: heater_output
                  - light.turn_on:
                      id: led_info
                      effect: error
                  - lambda: 'id(errors) = true;'

  - platform: resistance
    id: resistance_ntc_sensor
    sensor: source_ntc_sensor
    configuration: DOWNSTREAM
    resistor: 10kOhm
    reference_voltage:  3.3V
  - platform: adc
    id: source_ntc_sensor
    pin: ${sensor_ntc}
    update_interval: 10s
  - platform: ntc
    name: ${dev_name}_temperature
    id: temperature
    sensor: resistance_ntc_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 24.6°C
      reference_resistance: 4.634kOhm

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${dev_name}_ip
      icon: "mdi:lan"
    ssid:
      name: ${dev_name}_ssid
      icon: "mdi:wifi"
    mac_address:
      name: ${dev_name}_mac
      icon: "mdi:lan"

binary_sensor:
  - platform: gpio
    id: sensor_open
    name: ${dev_name}_open
    icon: "mdi:fan-alert"
    pin:
      number: $sensor_open
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_press:
      - if:
          condition:
            fan.is_on: fan_output
          then:
            - script.execute: play_beep_error
            - fan.turn_off: fan_output
            - if:
                condition:
                  switch.is_on: heater_output
                then:
                  - switch.turn_off: heater_output
            - light.turn_on:
                id: led_info
                effect: error
            - lambda: 'id(errors) = true;'
          else:
            - script.execute: play_beep
            - light.turn_off: led_info
            - lambda: 'id(errors) = false;'
    on_release: 
      - script.execute: play_beep
      - light.turn_off: led_info
      - lambda: 'id(errors) = false;'       

  - platform: gpio
    pin: 
      number: ${touch_1}
      inverted: True
    id: touch_1
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_multi_click:
      - timing:
          - ON for at least 3s
        then:
          - script.execute: play_beep
          - lambda: "id(fan_output).turn_off().set_speed(0).perform();"
    on_press:
      then:
        - script.execute: play_beep_short
        - lambda: |-
            if (id(fan_output).speed < 40) id(fan_output).turn_on().set_preset_mode("Low").perform();
            else if (id(fan_output).speed < 70) id(fan_output).turn_on().set_preset_mode("Middle").perform();
            else if (id(fan_output).speed < 100) id(fan_output).turn_on().set_preset_mode("Hight").perform();
            else id(fan_output).turn_on().set_preset_mode("Low").perform();
  - platform: gpio
    pin: 
      number: ${touch_2}
      inverted: True
    id: touch_2
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_multi_click:
      - timing:
          - ON for at least 3s
        then:
        - if:
            condition:
              switch.is_off: heater_output
            then:
              - script.execute: play_beep_short
              - switch.turn_on: heater_output
    on_press:
      then:
        - if:
            condition:
              switch.is_on: heater_output
            then:
              - script.execute: play_beep_short
              - switch.turn_off: heater_output

  - platform: gpio
    pin: 
      number: ${touch_3}
      inverted: True
    id: touch_3
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_multi_click:
      - timing:
          - ON for at least 5s
        then:
          - output.turn_on: buzzer
          - output.turn_on: led_1_speed
          - output.turn_on: led_2_speed
          - output.turn_on: led_3_speed
          - output.turn_on: led_heating
          - delay: 50ms
          - output.turn_off: buzzer
          - output.turn_off: led_1_speed
          - output.turn_off: led_2_speed
          - output.turn_off: led_3_speed
          - output.turn_off: led_heating
          - delay: 50ms
          - output.turn_on: buzzer
          - output.turn_on: led_1_speed
          - output.turn_on: led_2_speed
          - output.turn_on: led_3_speed
          - output.turn_on: led_heating
          - delay: 50ms
          - output.turn_off: buzzer
          - output.turn_off: led_1_speed
          - output.turn_off: led_2_speed
          - output.turn_off: led_3_speed
          - output.turn_off: led_heating
          - delay: 50ms
          - output.turn_on: buzzer
          - output.turn_on: led_1_speed
          - output.turn_on: led_2_speed
          - output.turn_on: led_3_speed
          - output.turn_on: led_heating
          - delay: 50ms
          - output.turn_off: buzzer
          - output.turn_off: led_1_speed
          - output.turn_off: led_2_speed
          - output.turn_off: led_3_speed
          - output.turn_off: led_heating
          - lambda: |-
              ESP_LOGW("DMF", "Erase settings and restart...");
              wifi::global_wifi_component->save_wifi_sta("-----", "");
              delay(500);
              ESP.restart();
    on_press:
      then:
        - script.execute: play_beep_short
        - if:
            condition:
              lambda: 'return id(errors);'
            then:
              - light.turn_off: led_info
              - lambda: 'id(errors) = false;'
            else:
              - if:
                  condition:
                    switch.is_off: led_enable
                  then:
                    - lambda: "id(half_led) = true;"
                    - switch.turn_on: led_enable
                  else: 
                    - if:
                        condition:
                            lambda: "return id(half_led);"
                        then:
                          - lambda: "id(half_led) = false;"
                          - script.execute: led_check
                        else:
                          - switch.turn_off: led_enable

fan:
  - platform: speed
    output: fan_pwm_gpio
    id: fan_output
    name: ${dev_name}_fan
    preset_modes:
      - Low
      - Middle
      - Hight
    on_preset_set:
      - lambda: |-
          id(no_mode) = true;
          if (id(fan_output).preset_mode == "Low") {
            id(fan_output).turn_on().set_speed(60).perform();
            id(mode) = 0;
          } else if (id(fan_output).preset_mode == "Middle") {
            id(fan_output).turn_on().set_speed(80).perform();
            id(mode) = 1;
          } else if (id(fan_output).preset_mode == "Hight") {
            id(fan_output).turn_on().set_speed(100).perform();
            id(mode) = 2;
          }
          id(no_mode) = false;
    on_state:
      - if:
          condition:
            not:
              lambda: 'return id(no_beep);'
          then:
            if:
              condition:
                switch.is_on: led_enable
              then:     
                script.execute: led_check
      - if:
          condition:
            switch.is_on: heater_output
          then:
            output.set_level:
              id: heating_gpio
              level: !lambda "return (id(target_power).state * (id(fan_output).speed / 100.0)) / 100.0;"
    on_turn_on:
      - if:
          condition:
            binary_sensor.is_on: sensor_open
          then:
            - script.execute: play_beep_error
            - fan.turn_off: fan_output
          else:
            - script.execute: play_beep_short
            - output.turn_on: fan_power
            - lambda: |-
                if (id(no_mode) == false) {
                  if (id(mode) == 0) id(fan_output).turn_on().set_speed(60).perform();
                  if (id(mode) == 1) id(fan_output).turn_on().set_speed(80).perform();
                  if (id(mode) == 2) id(fan_output).turn_on().set_speed(100).perform();
                }
    on_turn_off:
      - if:
          condition:
            not:
              lambda: 'return id(no_beep);'
          then:
            script.execute: play_beep_short
      - lambda: "id(fan_output).turn_off().set_speed(0).perform();"
      - if:
          condition:
            switch.is_on: heater_output
          then:
            - lambda: 'id(no_beep) = true;'
            - switch.turn_off: heater_output
            - lambda: 'id(no_beep) = false;'

number:
  - platform: template
    name: ${dev_name}_heat_power
    optimistic: true
    min_value: 10.0
    max_value: 100.0
    step: 5.0
    restore_value: true
    id: target_power
    icon: "mdi:thermometer-lines"
    unit_of_measurement: "%"
    on_value:
      - if:
          condition:
            switch.is_on: heater_output
          then:
            output.set_level:
              id: heating_gpio
              level: !lambda "return (id(target_power).state * (id(fan_output).speed / 100.0)) / 100.0;"
      - lambda: 'global_preferences->sync();'

switch:
  - platform: template
    id: heater_output
    name: ${dev_name}_heat
    icon: "mdi:heat-wave"
    turn_on_action:
      - if:
          condition:
            fan.is_on: fan_output
          then:
            - script.execute: play_beep_short
            - switch.template.publish:
                id: heater_output
                state: true
            - if:
                condition:
                  switch.is_on: led_enable
                then:     
                  script.execute: led_check
            - output.set_level:
                id: heating_gpio
                level: !lambda "return (id(target_power).state * (id(fan_output).speed / 100.0)) / 100.0;"
          else:
            - script.execute: play_beep_error
            - switch.template.publish:
                id: heater_output
                state: false
            - output.turn_off: led_heating     
            - output.turn_off: heating_gpio
    turn_off_action:
        - if:
            condition:
              not:
                lambda: 'return id(no_beep);'
            then:
              script.execute: play_beep_short
        - output.turn_off: led_heating
        - output.turn_off: heating_gpio
        - switch.template.publish:
            id: heater_output
            state: false

  - platform: template
    id: led_enable
    name: ${dev_name}_led
    icon: "mdi:lightbulb-on"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: "config"
    on_turn_on: 
      - script.execute: led_check
    on_turn_off: 
      - script.execute: led_off
  
  - platform: template
    id: buzzer_enable
    name: ${dev_name}_buzzer
    icon: "mdi:volume-high"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: "config"
